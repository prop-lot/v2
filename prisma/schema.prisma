// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Community {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  data        Json      @default("{ \"pfp\": \"\" }")
  uname       String    @unique // lowercase identifier which should match the subdomain for a community
  ideas       Idea[]
}

model Image {
  id          String    @id @default(uuid())
  url         String
  idea        Idea      @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  ideaId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Idea {
  id                    String    @id @default(uuid())
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  title                 String    @db.VarChar(50)
  tldr                  String    @db.VarChar(240)
  description           String    @db.VarChar(1080)
  tokenSupplyOnCreate   Int?      @default(value: 0) // token supply at time of Idea creation.
  createdAtBlock        Int       @default(0)
  deleted               Boolean   @default(value: false)
  createdBy             User      @relation(fields: [creatorId], references: [wallet])
  creatorId             String
  community             Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId           String
  comments              Comment[]
  votes                 Vote[]
  tags                  Tag[]
  images                Image[]
  expiryOption          IdeaExpiryOption
  expiryDate            DateTime  @default(now())

  @@index([creatorId])
  @@index([communityId])
  @@index([deleted])
  @@index([createdAt])
}

model User {
  id                String    @id @default(uuid())
  wallet            String    @unique
  ens               String?
  ideas             Idea[]
  votes             Vote[]
  comments          Comment[]
}

// direction
// +1 for up
// -1 for down
// sum of direction = total score
model Vote {
  id          String    @id @default(uuid())
  direction   Int
  idea        Idea      @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  ideaId      String
  voter       User      @relation(fields: [voterId], references: [wallet])
  voterId     String
  voterWeight Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([ideaId, voterId])
  @@index([voterId])
  @@index([ideaId])
}

model Comment {
  id          String    @id @default(uuid())
  body        String
  idea        Idea      @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  ideaId      String
  author      User      @relation(fields: [authorId], references: [wallet])
  authorId    String
  replies     Comment[] @relation("Comment_Children")
  parent      Comment?  @relation("Comment_Children", fields: [parentId], references: [id], onDelete: Cascade)
  parentId    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deleted     Boolean   @default(value: false)

  @@index([authorId])
  @@index([ideaId])
  @@index([deleted])
}

model Tag {
  id     String    @id @default(uuid())
  type   TagType @unique
  label  String
  Ideas  Idea[]
}

enum TagType {
  CREATIVE
  COMMUNITY
  GOVERNANCE
  PUBLIC_GOOD
  SOFTWARE
  HARDWARE
  OTHER
}

enum IdeaExpiryOption {
  SEVEN_DAYS
  FOURTEEN_DAYS
  TWENTY_EIGHT_DAYS
}
